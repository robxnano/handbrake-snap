name: handbrake-gui # Change to 'handbrake' for official release
adopt-info: handbrake
grade: stable
confinement: strict
base: core22
compression: lzo
architectures:
  - build-on: amd64
  - build-on: arm64

apps:
  handbrake:
    command: usr/bin/ghb
    common-id: fr.handbrake.ghb.desktop
    desktop: usr/share/applications/fr.handbrake.ghb.desktop
    extensions: [gnome]
    plugs:
      - home
      - removable-media
      - screen-inhibit-control
      - shutdown
      - upower-observe
    environment:
      LIBVA_DRIVERS_PATH: $SNAP/intel-plugin/lib/$CRAFT_ARCH_TRIPLET/dri
      LD_LIBRARY_PATH: $LD_LIBRARY_PATH:$SNAP/intel-plugin/lib/$CRAFT_ARCH_TRIPLET:$SNAP/usr/lib/${CRAFT_ARCH_TRIPLET}/blas:$SNAP/usr/lib/${CRAFT_ARCH_TRIPLET}/lapack
  cli:
    command: usr/bin/HandBrakeCLI
    common-id: fr.handbrake.HandBrakeCLI
    extensions: [gnome]
    plugs:
      - home
      - removable-media
    environment:
      LIBVA_DRIVERS_PATH: $SNAP/intel-plugin/lib/$CRAFT_ARCH_TRIPLET/dri
      LD_LIBRARY_PATH: $LD_LIBRARY_PATH:$SNAP/intel-plugin/lib/$CRAFT_ARCH_TRIPLET

# Allows plugins for hardware acceleration to be mounted
plugs:
  intel-0-2204: # plugin_name-api_version-ubuntu_base
    interface: content
    content: intel-0-2204
    target: $SNAP/intel-plugin/lib

parts:
  # cargo-c is not in Ubuntu 22.04 so use rustup to install the toolchain
  rust-toolchain:
    plugin: nil
    override-pull: |
      craftctl default
      curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal
    override-build: |
      source "$HOME/.cargo/env"
      craftctl default
      cargo install cargo-c
    build-packages:
      - libssl-dev
      - pkg-config
      - zlib1g-dev
    prime:
      - -**/*

  handbrake:
    after: [rust-toolchain]
    source-type: git
    source: https://github.com/handbrake/handbrake.git
    parse-info: [usr/share/metainfo/fr.handbrake.ghb.metainfo.xml]
    plugin: make
    build-environment:
      - CFLAGS: '-I/snap/gnome-42-2204-sdk/current/usr/include'
    override-pull: |
      craftctl default
      craftctl set version="`gtk/data/version.sh`"
    override-build: |
      source "$HOME/.cargo/env"
      cd ..
      rm -rf build
      mkdir -p build
      cd build
      if [ "$CRAFT_TARGET_ARCH" = "amd64" ]; then
        FLAG_QSV=--enable-qsv
      else
        FLAG_QSV=--disable-qsv
      fi
      ${CRAFT_PART_SRC}/configure --prefix=/usr "$FLAG_QSV" --disable-nvenc --disable-nvdec --disable-vce --snap
      craftctl default
    build-packages:
      - autoconf
      - automake
      - autopoint
      - cmake
      - curl
      - libass-dev
      - libbz2-dev
      - libgstreamer-plugins-bad1.0-dev
      - libicu-dev
      - libjansson-dev
      - libmp3lame-dev
      - libnuma-dev
      - libopus-dev
      - libspeex-dev
      - libtheora-dev
      - libtool
      - libtool-bin
      - libturbojpeg0-dev
      - libvorbis-dev
      - libvpx-dev
      - libx264-dev
      - nasm
    prime:
      - -usr/etc
      - -usr/include
      - -usr/lib/$CRAFT_ARCH_TRIPLET/cmake
      - -usr/lib/$CRAFT_ARCH_TRIPLET/lib*.a
      - -usr/lib/$CRAFT_ARCH_TRIPLET/lib*.la
      - -usr/lib/$CRAFT_ARCH_TRIPLET/lib*.so
      - -usr/lib/$CRAFT_ARCH_TRIPLET/pkgconfig
      - -usr/lib/pkgconfig
      - -usr/share/doc
      - -usr/share/ffmpeg
      - -usr/share/vpl

  # Only include libraries required by ghb or libgstlibav.so which are not in
  # the base or platform snap
  libraries:
    plugin: nil
    stage-packages:
      - gstreamer1.0-libav
      - libass9
      - libblas3
      - libjansson4
      - libnuma1
      - libturbojpeg
      - libx264-163
    prime:
      - usr/lib/*/gstreamer-1.0/libgstlibav.so
      - usr/lib/*/libavfilter.so.*
      - usr/lib/*/libavformat.so.*
      - usr/lib/*/libavcodec.so.*
      - usr/lib/*/libavutil.so.*
      - usr/lib/*/libswscale.so.*
      - usr/lib/*/libpostproc.so.*
      - usr/lib/*/libswresample.so.*
      - usr/lib/*/libpocketsphinx.so.*
      - usr/lib/*/libsphinxbase.so.*
      - usr/lib/*/libbs2b.so.*
      - usr/lib/*/liblilv-0.so.*
      - usr/lib/*/librubberband.so.*
      - usr/lib/*/libmysofa.so.*
      - usr/lib/*/libflite_cmu_us_awb.so.*
      - usr/lib/*/libflite_cmu_us_kal.so.*
      - usr/lib/*/libflite_cmu_us_kal16.so.*
      - usr/lib/*/libflite_cmu_us_rms.so.*
      - usr/lib/*/libflite_cmu_us_slt.so.*
      - usr/lib/*/libflite.so.*
      - usr/lib/*/libass.so.*
      - usr/lib/*/libvidstab.so.*
      - usr/lib/*/libzmq.so.*
      - usr/lib/*/libzimg.so.*
      - usr/lib/*/libOpenCL.so.*
      - usr/lib/*/libmfx.so.*
      - usr/lib/*/libgme.so.*
      - usr/lib/*/libopenmpt.so.*
      - usr/lib/*/libchromaprint.so.*
      - usr/lib/*/libbluray.so.*
      - usr/lib/*/librabbitmq.so.*
      - usr/lib/*/libsrt-gnutls.so.*
      - usr/lib/*/libssh-gcrypt.so.*
      - usr/lib/*/libdav1d.so.*
      - usr/lib/*/librsvg-2.so.*
      - usr/lib/*/libzvbi.so.*
      - usr/lib/*/libsnappy.so.*
      - usr/lib/*/libaom.so.*
      - usr/lib/*/libcodec2.so.*
      - usr/lib/*/libgsm.so.*
      - usr/lib/*/libshine.so.*
      - usr/lib/*/libx264.so.*
      - usr/lib/*/libx265.so.*
      - usr/lib/*/libxvidcore.so.*
      - usr/lib/*/libvdpau.so.*
      - usr/lib/*/libsoxr.so.*
      - usr/lib/*/blas/libblas.so.*
      - usr/lib/*/lapack/liblapack.so.*
      - usr/lib/*/libserd-0.so.*
      - usr/lib/*/libsord-0.so.*
      - usr/lib/*/libsratom-0.so.*
      - usr/lib/*/libflite_usenglish.so.*
      - usr/lib/*/libflite_cmulex.so.*
      - usr/lib/*/libsodium.so.*
      - usr/lib/*/libpgm-5.3.so.*
      - usr/lib/*/libnorm.so.*
      - usr/lib/*/libudfread.so.*
      - usr/lib/*/libnuma.so.*
      - usr/lib/*/libgfortran.so.*
      - usr/lib/*/libjansson.so.*
      - usr/lib/*/libturbojpeg.so.*

  # Find files provided by the base and platform snap and ensure they aren't
  # duplicated in this snap
  cleanup:
    after: [libraries]
    plugin: nil
    build-snaps: [core22, gtk-common-themes, gnome-42-2204]
    override-prime: |
      set -eux
      for snap in "core22" "gtk-common-themes" "gnome-42-2204"; do
        cd "/snap/$snap/current" && find . -type f,l -name *.so.* -exec rm -f "$CRAFT_PRIME/{}" \;
      done
