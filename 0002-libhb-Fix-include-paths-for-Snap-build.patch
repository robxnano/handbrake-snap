From da3bb2474f236d8801703f276a37e50a9a311555 Mon Sep 17 00:00:00 2001
From: robxnano <89391914+robxnano@users.noreply.github.com>
Date: Fri, 31 Jan 2025 14:38:46 +0000
Subject: [PATCH 2/6] libhb: Fix include paths for Snap build

Some libraries are installed in non-standard locations in the
platform snap, and require pkg-config flags to build with.
---
 libhb/module.defs     |  9 +++++++++
 make/include/gcc.defs | 10 ++++++----
 2 files changed, 15 insertions(+), 4 deletions(-)

diff --git a/libhb/module.defs b/libhb/module.defs
index 5fbb4750d..f3e62e03f 100644
--- a/libhb/module.defs
+++ b/libhb/module.defs
@@ -14,6 +14,9 @@ $(eval $(call import.MODULE.defs,LIBHB,libhb,$(__deps__)))
 $(eval $(call import.GCC,LIBHB))
 $(eval $(call import.METAL,LIBHB))
 
+LIBHB.PKGCONFIG.env = PKG_CONFIG_PATH="$(call fn.ABSOLUTE,$(CONTRIB.build/))lib/pkgconfig:$(PKG_CONFIG_PATH)"
+LIBHB.PKGCONFIG.exe = $(LIBHB.PKGCONFIG.env) $(PKGCONFIG.exe)
+
 ###############################################################################
 
 LIBHB.src/   = $(SRC/)libhb/
@@ -63,6 +66,12 @@ ifneq (,$(filter $(HOST.system),freebsd netbsd openbsd))
     LIBHB.GCC.I += $(LOCALBASE)/include
 endif
 
+LIBHB.pkgconfig_libs = libva
+
+ifeq (1,$(FEATURE.snap))
+    LIBHB.GCC.pkgconf_i += $(shell $(LIBHB.PKGCONFIG.exe) --cflags $(LIBHB.pkgconfig_libs))
+endif
+
 ifeq ($(HOST.system),cygwin)
     LIBHB.GCC.D += SYS_CYGWIN
 else ifeq ($(HOST.system),darwin)
diff --git a/make/include/gcc.defs b/make/include/gcc.defs
index 00cfcf1ae..d04c014b4 100644
--- a/make/include/gcc.defs
+++ b/make/include/gcc.defs
@@ -87,6 +87,7 @@ GCC.args.F                 = -F$(1)
 GCC.args.f                 = -framework $(1)
 GCC.args.L                 = -L$(1)
 GCC.args.l                 = -l$(1)
+GCC.args.pkgconf_i         = $(1)
 GCC.args.pkgconfig         = $(1)
 GCC.args.end               = -Wl,--end-group
 
@@ -183,6 +184,7 @@ define import.GCC
     $(1).GCC.args.lto.thin  = $$(GCC.args.lto.thin)
     $(1).GCC.args.D         = $$(GCC.args.D)
     $(1).GCC.args.I         = $$(GCC.args.I)
+    $(1).GCC.args.pkgconf_i = $$(GCC.args.pkgconf_i)
     $(1).GCC.args.muldefs   = $$(GCC.args.muldefs)
     $(1).GCC.args.start     = $$(GCC.args.start)
     $(1).GCC.args.F         = $$(GCC.args.F)
@@ -208,19 +210,19 @@ define import.GCC
     $(1).GCC.o = -o $$(3)
 
     # FUNCTION: C precompiled headers
-    $(1).GCC.H_O.args = !gcc ?c_std ?pipe ?ML ?H *W *archs *sysroot *minver ?vis ?pic .g .O ?extra ?extra.h_o .cpu .lto *D *I !c !o
+    $(1).GCC.H_O.args = !gcc ?c_std ?pipe ?ML ?H *W *archs *sysroot *minver ?vis ?pic .g .O ?extra ?extra.h_o .cpu .lto *D *I !pkgconf_i !c !o
     $(1).GCC.H_O = $$(call fn.ARGS,$(1).GCC,$$($(1).GCC.H_O.args),$$(1),$$(2))
 
     # FUNCTION: C compile source
-    $(1).GCC.C_O.args = !gcc ?c_std ?pipe ?ML ?H *W *archs *sysroot *minver ?vis ?pic .g .O ?extra ?extra.c_o .cpu .lto *D *I !c !o
+    $(1).GCC.C_O.args = !gcc ?c_std ?pipe ?ML ?H *W *archs *sysroot *minver ?vis ?pic .g .O ?extra ?extra.c_o .cpu .lto *D *I !pkgconf_i !c !o
     $(1).GCC.C_O = $$(call fn.ARGS,$(1).GCC,$$($(1).GCC.C_O.args),$$(1),$$(2))
 
     # FUNCTION: C++ precompile headers
-    $(1).GCC.HPP_O.args = !gxx ?cxx_std ?pipe ?ML ?H *W *archs *sysroot *minver ?vis ?pic .g .O ?extra ?extra.hpp_o .cpu .lto *D *I !c !o
+    $(1).GCC.HPP_O.args = !gxx ?cxx_std ?pipe ?ML ?H *W *archs *sysroot *minver ?vis ?pic .g .O ?extra ?extra.hpp_o .cpu .lto *D *I !pkgconf_i !c !o
     $(1).GCC.HPP_O = $$(call fn.ARGS,$(1).GCC,$$($(1).GCC.HPP_O.args),$$(1),$$(2))
 
     # FUNCTION: C++ compile source
-    $(1).GCC.CPP_O.args = !gxx ?cxx_std ?pipe ?ML ?H *W *archs *sysroot *minver ?vis ?pic .g .O ?extra ?extra.cpp_o .cpu .lto *D *I !c !o
+    $(1).GCC.CPP_O.args = !gxx ?cxx_std ?pipe ?ML ?H *W *archs *sysroot *minver ?vis ?pic .g .O ?extra ?extra.cpp_o .cpu .lto *D *I !pkgconf_i !c !o
     $(1).GCC.CPP_O = $$(call fn.ARGS,$(1).GCC,$$($(1).GCC.CPP_O.args),$$(1),$$(2))
 
     ###########################################################################
-- 
2.51.0

